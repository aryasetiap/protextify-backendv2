import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import PDFDocument from 'pdfkit';
import { PrismaService } from '../../prisma/prisma.service';

@Injectable()
export class PDFReportService {
  private readonly logger = new Logger(PDFReportService.name);

  constructor(
    private readonly configService: ConfigService,
    private readonly prismaService: PrismaService,
  ) {}

  async generatePlagiarismReport(
    submissionId: string,
    includeDetailedResults: boolean = false,
  ): Promise<Buffer> {
    const submission = await this.prismaService.submission.findUnique({
      where: { id: submissionId },
      include: {
        student: true,
        assignment: {
          include: { class: true },
        },
        plagiarismChecks: true,
      },
    });

    if (!submission || !submission.plagiarismChecks) {
      throw new Error('Submission or plagiarism check not found');
    }

    const { plagiarismChecks } = submission;

    return new Promise((resolve, reject) => {
      try {
        const doc = new PDFDocument();
        const buffers: Buffer[] = [];

        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
          const pdfBuffer = Buffer.concat(buffers);
          resolve(pdfBuffer);
        });

        // Header
        doc.fontSize(20).text('Plagiarism Check Report', 50, 50);
        doc.moveDown();

        // Basic Information
        doc.fontSize(14).text('Submission Information:', 50, doc.y);
        doc
          .fontSize(12)
          .text(`Student: ${submission.student.fullName}`, 50, doc.y + 20)
          .text(`Assignment: ${submission.assignment.title}`, 50, doc.y + 15)
          .text(`Class: ${submission.assignment.class.name}`, 50, doc.y + 15)
          .text(
            `Checked At: ${plagiarismChecks.checkedAt.toLocaleString()}`,
            50,
            doc.y + 15,
          );

        doc.moveDown();

        // Plagiarism Results
        doc.fontSize(14).text('Plagiarism Results:', 50, doc.y + 20);
        doc
          .fontSize(12)
          .text(`Plagiarism Score: ${plagiarismChecks.score}%`, 50, doc.y + 20)
          .text(`Word Count: ${plagiarismChecks.wordCount}`, 50, doc.y + 15)
          .text(
            `Credits Used: ${plagiarismChecks.creditsUsed}`,
            50,
            doc.y + 15,
          );

        // Content Preview
        doc.moveDown();
        doc.fontSize(14).text('Submission Content:', 50, doc.y + 20);
        const contentPreview =
          submission.content.length > 500
            ? submission.content.substring(0, 500) + '...'
            : submission.content;

        doc.fontSize(10).text(contentPreview, 50, doc.y + 15, {
          width: 500,
          align: 'justify',
        });

        // Detailed Results (for instructors only)
        if (includeDetailedResults && plagiarismChecks.rawResponse) {
          const rawData = plagiarismChecks.rawResponse as any;

          doc.moveDown();
          doc.fontSize(14).text('Detailed Analysis:', 50, doc.y + 30);

          if (rawData.sources && rawData.sources.length > 0) {
            doc.fontSize(12).text('Sources Found:', 50, doc.y + 15);
            rawData.sources.forEach((source: any, index: number) => {
              doc
                .fontSize(10)
                .text(
                  `${index + 1}. ${source.title} (${source.score}% match) - ${source.url}`,
                  70,
                  doc.y + 12,
                  { width: 450 },
                );
            });
          } else {
            doc.fontSize(10).text('No matching sources found.', 70, doc.y + 15);
          }
        }

        // Footer
        doc
          .fontSize(8)
          .text('Generated by Protextify Platform', 50, doc.page.height - 50)
          .text(new Date().toLocaleString(), 50, doc.page.height - 35);

        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }
}
