generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  fullName      String
  password      String?
  role          Role
  institution   String?
  googleId      String?           @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  emailVerified Boolean           @default(false)
  classes       Class[]           @relation("InstructorClasses")
  enrollments   ClassEnrollment[]
  creditBalance CreditBalance?
  submissions   Submission[]
  transactions  Transaction[]
}

model CreditBalance {
  id        String   @id @default(uuid())
  userId    String   @unique
  credits   Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Class {
  id           String            @id @default(uuid())
  name         String
  description  String?
  classToken   String            @unique
  instructorId String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  assignments  Assignment[]
  instructor   User              @relation("InstructorClasses", fields: [instructorId], references: [id])
  enrollments  ClassEnrollment[]
}

model ClassEnrollment {
  id        String   @id @default(uuid())
  studentId String
  classId   String
  joinedAt  DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId])
}

model Assignment {
  id           String       @id @default(uuid())
  title        String
  instructions String?
  deadline     DateTime?
  classId      String
  createdAt    DateTime     @default(now())
  class        Class        @relation(fields: [classId], references: [id])
  submissions  Submission[]
}

model Submission {
  id               String           @id @default(uuid())
  content          String           @default("")
  status           SubmissionStatus @default(DRAFT)
  grade            Float?
  studentId        String
  assignmentId     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  plagiarismChecks PlagiarismCheck?
  assignment       Assignment       @relation(fields: [assignmentId], references: [id])
  student          User             @relation(fields: [studentId], references: [id])
}

model PlagiarismCheck {
  id           String     @id @default(uuid())
  submissionId String     @unique
  score        Float
  status       String
  wordCount    Int
  creditsUsed  Int
  checkedAt    DateTime   @default(now())
  rawResponse  Json?
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model Transaction {
  id               String            @id @default(uuid())
  userId           String
  amount           Float
  creditsPurchased Int
  status           TransactionStatus @default(PENDING)
  midtransOrderId  String            @unique
  midtransToken    String?
  createdAt        DateTime          @default(now())
  user             User              @relation(fields: [userId], references: [id])
}

enum Role {
  STUDENT
  INSTRUCTOR
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
