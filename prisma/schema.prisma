generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  fullName      String
  password      String?
  role          Role
  institution   String?
  phone         String?
  bio           String?           @db.Text // ðŸ†• Add bio field
  avatarUrl     String? // ðŸ†• Add avatarUrl field
  googleId      String?           @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  emailVerified Boolean           @default(false)
  classes       Class[]           @relation("InstructorClasses")
  enrollments   ClassEnrollment[]
  creditBalance CreditBalance?
  submissions   Submission[]
  transactions  Transaction[]
  ClassActivity ClassActivity[]
  attachments   Attachment[] //  iliÅŸkiyi ekle
}

model CreditBalance {
  id        String   @id @default(uuid())
  userId    String   @unique
  credits   Int      @default(0)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Class {
  id           String            @id @default(uuid())
  name         String
  description  String?
  classToken   String            @unique
  instructorId String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  assignments  Assignment[]
  instructor   User              @relation("InstructorClasses", fields: [instructorId], references: [id])
  enrollments  ClassEnrollment[]
  activities   ClassActivity[]
}

model ClassEnrollment {
  id        String   @id @default(uuid())
  studentId String
  classId   String
  joinedAt  DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId])
}

model Assignment {
  id                   String        @id @default(uuid())
  title                String
  instructions         String?
  deadline             DateTime?
  classId              String
  createdAt            DateTime      @default(now())
  expectedStudentCount Int
  active               Boolean       @default(false)
  class                Class         @relation(fields: [classId], references: [id])
  submissions          Submission[]
  Transaction          Transaction[]
  attachments          Attachment[] // iliÅŸkiyi ekle
}

model Submission {
  id               String              @id @default(uuid())
  content          String              @default("")
  status           SubmissionStatus    @default(DRAFT)
  grade            Float?
  feedback         String?
  studentId        String
  assignmentId     String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  submittedAt      DateTime? // ðŸ†• Tambahkan field ini
  plagiarismChecks PlagiarismCheck?
  assignment       Assignment          @relation(fields: [assignmentId], references: [id])
  student          User                @relation(fields: [studentId], references: [id])
  versions         SubmissionVersion[]
  attachments      Attachment[] // iliÅŸkiyi ekle
  studentFeedback  Int[] // Array of 5 integer scores (nullable)
}

model SubmissionVersion {
  id           String   @id @default(cuid())
  submissionId String
  version      Int
  content      String
  updatedAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, version])
  @@index([submissionId])
  @@map("submission_versions")
}

model PlagiarismCheck {
  id           String     @id @default(uuid())
  submissionId String     @unique
  score        Float
  status       String
  wordCount    Int
  creditsUsed  Int
  checkedAt    DateTime   @default(now())
  rawResponse  Json?
  submission   Submission @relation(fields: [submissionId], references: [id])
}

// ðŸ”½ Yeni modeli buraya ekleyin
model Attachment {
  id           String   @id @default(cuid())
  filename     String
  size         Int
  mimeType     String
  cloudKey     String   @unique
  description  String?
  uploadedAt   DateTime @default(now())
  uploaderId   String
  assignmentId String?
  submissionId String?

  uploader   User        @relation(fields: [uploaderId], references: [id])
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  submission Submission? @relation(fields: [submissionId], references: [id])

  @@index([assignmentId])
  @@index([submissionId])
}

model Transaction {
  id                    String            @id @default(uuid())
  userId                String
  amount                Float
  creditsPurchased      Int               @default(0)
  status                TransactionStatus @default(PENDING)
  midtransTransactionId String            @unique
  midtransToken         String?
  paymentMethod         String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id])
  assignmentId          String?
  assignment            Assignment?       @relation(fields: [assignmentId], references: [id])
}

model ClassActivity {
  id        String       @id @default(cuid())
  classId   String
  type      ActivityType
  timestamp DateTime     @default(now())
  details   Json
  actorId   String?

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([classId, timestamp])
}

enum Role {
  STUDENT
  INSTRUCTOR
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
}

enum ActivityType {
  STUDENT_JOINED
  ASSIGNMENT_CREATED
  SUBMISSION_SUBMITTED
  SUBMISSION_GRADED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
